---
- hosts: all
  user: root
  vars:
    database_user: "{{lookup('env', 'DATABASE_USER')}}"
    database_password: "{{lookup('env', 'DATABASE_PASSWORD')}}"
    database_name: "{{lookup('env', 'DATABASE_NAME')}}"
    database_url: 'postgres://{{database_user}}:{{database_password}}@localhost:5432/{{database_name}}'
    application_path: /var/www/app
    secret_key_base: "{{lookup('env', 'SECRET_KEY_BASE')}}"
    sidekiq_username: "{{lookup('env', 'SIDEKIQ_USERNAME')}}"
    sidekiq_password: "{{lookup('env', 'SIDEKIQ_PASSWORD')}}"
    repository: https://github.com/waltz/exportgifsound.com
  tasks:
    - name: add support for https in apt
      apt: pkg={{item}} state=latest update_cache=yes cache_valid_time=3600
      with_items:
      - apt-transport-https
      - ca-certificates

    - name: add key for passenger repos
      apt_key: url=http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x561F9B9CAC40B2F7 id=AC40B2F7 state=present

    - name: add the passenger repo
      apt_repository: repo='deb https://oss-binaries.phusionpassenger.com/apt/passenger xenial main'

    - name: force an apt update
      apt: update_cache=yes

    - name: add the brightbox ruby repo
      apt_repository: repo='ppa:brightbox/ruby-ng'

    - name: install packages
      apt: name={{item}} state=latest update_cache=yes
      with_items:
        - software-properties-common
        - build-essential
        - redis-server
        - ffmpeg
        - postgresql
        - postgresql-contrib
        - ruby2.3
        - ruby2.3-dev
        - python-psycopg2
        - nginx-extras
        - passenger
        - libffi-dev
        - libpq-dev

    - name: install bundler
      gem: name={{item}} state=latest user_install=no
      with_items:
        - rake
        - bundler

    - name: start redis
      systemd:
        name: redis-server
        state: started

    - name: start postgres
      systemd:
        name: postgresql
        state: started

    - name: configure postgres db
      become: true
      become_user: postgres
      postgresql_db:
        name: '{{database_name}}'

    - name: configure postgres user
      become: true
      become_user: postgres
      postgresql_user:
        db: '{{database_name}}'
        name: '{{database_user}}'
        password: '{{database_password}}'
        priv: ALL

    - name: tell nginx to enable the passenger module
      lineinfile:
        dest: /etc/nginx/nginx.conf
        regexp: 'passenger.conf'
        line: 'include /etc/nginx/passenger.conf;'

    - name: enable and configure the nginx site
      copy:
        dest: /etc/nginx/sites-available/default
        content: |
          server {
            listen 80;
            passenger_enabled on;
            root {{application_path}}/public;
          	passenger_env_var PATH /usr/bin:/bin;
            passenger_env_var DATABASE_URL {{database_url}};
            passenger_env_var SECRET_KEY_BASE {{secret_key_base}};
            passenger_env_var SIDEKIQ_USERNAME {{sidekiq_username}};
            passenger_env_var SIDEKIQ_PASSWORD {{sidekiq_password}};
          }

    - name: wrap sidekiq in an systemd service
      copy:
        dest: /lib/systemd/system/sidekiq.service
        content: |
          [Unit]
          Description=sidekiq
          After=syslog.target network.target redis-server.service

          [Service]
          Type=simple
          WorkingDirectory={{application_path}}
          ExecStart=/usr/local/bin/bundle exec sidekiq -e production
          User=deploy
          Group=deploy
          UMask=0002
          Environment=DATABASE_URL={{database_url}}

          RestartSec=1
          Restart=on-failure

          StandardOutput=syslog
          StandardError=syslog

          SyslogIdentifier=sidekiq

          [Install]
          WantedBy=multi-user.target

    - name: start the sidekiq service
      systemd:
        name: sidekiq
        enabled: yes
        state: started
        daemon_reload: yes

    - name: make nginx reload its configuration
      systemd:
        name: nginx
        state: reloaded

    - name: create the deploy user
      user:
        name: deploy

    - name: authorize the deploy key
      authorized_key:
        user: deploy
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"

    - name: set the application data directory
      file:
        path: '{{application_path}}'
        state: directory
        owner: deploy
        group: deploy
        mode: 0755

    - name: get the code
      become: true
      become_user: deploy
      git:
        repo: '{{repository}}'
        dest: '{{application_path}}'
        force: yes

    - name: install application dependencies
      become: true
      become_user: deploy
      bundler:
        state: present
        gemfile: '{{application_path}}/Gemfile'

    - name: migrate the database
      become: true
      become_user: deploy
      command: rails db:migrate
      environment:
        DATABASE_URL: '{{database_url}}'
      args:
        chdir: '{{application_path}}'

    - name: compile assets
      become: true
      become_user: deploy
      command: rails assets:precompile
      args:
        chdir: '{{application_path}}'
